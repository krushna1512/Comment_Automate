name: Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      redmine_ticket_id:
        description: 'Redmine Ticket ID to update with pipeline status and logs'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up environment
      - name: Set up environment
        run: |
          echo "Setting up environment variables"
          export REDMINE_TICKET_ID=${{ github.event.inputs.redmine_ticket_id }}

      # Run deployment steps (replace with your actual deployment commands)
      - name: Run deployment
        id: deployment_step
        run: |
          echo "Starting deployment process..."
          # Simulate deployment
          echo "Deployment completed successfully!"

      # Capture logs and send to Redmine
      - name: Notify Redmine
        if: always() # Ensures this runs regardless of success/failure
        env:
          REDMINE_API_KEY: 1575c3fb0e3c75e8261b9903ebbba14362bcc09f
          REDMINE_BASE_URL: https://redmine.yapsody.net
        run: |
          PIPELINE_STATUS=${{ job.status }}
          DEPLOY_LOGS=$(cat $GITHUB_WORKSPACE/deployment.log || echo "No logs found.")
          
          echo "Updating Redmine ticket #${REDMINE_TICKET_ID}..."
          
          COMMENT_BODY="Pipeline Status: ${PIPELINE_STATUS}%0ADeployment Logs:%0A\`\`\`${DEPLOY_LOGS}\`\`\`"

          curl -X POST "$REDMINE_BASE_URL/issues/${REDMINE_TICKET_ID}/notes" \
          -H "Content-Type: application/json" \
          -H "X-Redmine-API-Key: $REDMINE_API_KEY" \
          -d "{\"issue\": {\"notes\": \"${COMMENT_BODY}\"}}"

